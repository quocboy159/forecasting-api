# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core 
#trigger rebuild

parameters:
  - name: 'buildConfiguration'
    type: string
    default: 'Release'
  - name: 'buildEnv'
    type: string

steps:
- bash: |
    cd $(Agent.BuildDirectory)/backend
    HASH=$(git rev-parse --short HEAD)
    echo "Hash is $HASH"
    echo "##vso[task.setvariable variable=buildNumber]$HASH"
    echo $HASH > $(Build.ArtifactStagingDirectory)/backend-buildhash
    GITBRANCH=$(git rev-parse --abbrev-ref HEAD)
    BRANCH=$(echo $GITBRANCH | sed 's/.*\///')
    echo "Branch is set to: $BRANCH"
    #echo "##vso[task.setvariable variable=buildEnv]$BRANCH"
    echo "${{ parameters.buildEnv }}"
    echo "##vso[task.setvariable variable=buildEnv]${{ parameters.buildEnv }}"

- task: NuGetToolInstaller@1

- task: DotNetCoreCLI@2
  displayName: 'dotnet restore'
  inputs:
    command: restore
    projects: '$(Agent.BuildDirectory)/backend/**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: build
    projects: '$(Agent.BuildDirectory)/backend/**/*.csproj'
    arguments: '--configuration Release' # Update this to match your need

- task: DotNetCoreCLI@2
  inputs:
    command: test
    projects: '$(Agent.BuildDirectory)/backend/**/*Tests/*.csproj'
    arguments: '--configuration ${{ parameters.buildConfiguration }}'

- task: DotNetCoreCLI@2
  inputs:
    command: test
    projects: '$(Agent.BuildDirectory)/backend/**/*Tests/*.csproj'
    arguments: '--configuration ${{ parameters.buildConfiguration }} --collect "Code coverage"'


- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: False
    arguments: '--configuration ${{ parameters.buildConfiguration }} --output $(Build.ArtifactStagingDirectory) -p:EnableDropAllTablesAPI=$(buildEnv)'
    projects: '$(Agent.BuildDirectory)/backend/WebAPI/*.csproj'
    zipAfterPublish: True
    workingDirectory: '$(Agent.BuildDirectory)/backend'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: "$(Build.ArtifactStagingDirectory)"
    includeRootFolder: true
    archiveType: "zip"
    archiveFile: "$(Build.ArtifactStagingDirectory)/backend-$(buildNumber).zip"
    replaceExistingArchive: true
    
  
- publish: '$(Build.ArtifactStagingDirectory)'
  displayName: 'Publish build artifacts'
  artifact: backendArtifacts